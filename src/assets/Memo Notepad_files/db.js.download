/** Unit tests for Db methods
*/
var DbUnitTests = {};

(function() {
    DbUnitTests._testRow = {
        id: "test_row",
        last_modified: new Date().toISOString(),
        text: "test_text"
    };

    DbUnitTests.tests = {
        _store: function(cbk) {
            var store = Db._store("notes");

            if (!store) { return cbk([0, "Expected store"]); }

            cbk();
        },

        clear: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row: async.constant(DbUnitTests._testRow),

                addRow: ["initDb", "row", function(go_on, res) {
                    Db.write({
                        key: res.row.id,
                        row: res.row,
                        store: "notes"
                    },
                    go_on);
                }],

                wipeDb: ["addRow", function(go_on, res) {
                    Db.clear({}, go_on);
                }],

                getRow: ["wipeDb", "row", function(go_on, res) {
                    Db.getRow({key: res.row.id, store: "notes"}, go_on);
                }],

                confirmWiped: ["getRow", function(go_on, res) {
                    if (!!res.getRow) { return go_on([0, "Expected wipe"]); }

                    go_on();
                }]
            },
            cbk);
        },

        getRow: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row: async.constant(DbUnitTests._testRow),

                addRow: ["initDb", "row", function(go_on, res) {
                    Db.write({
                        key: res.row.id,
                        row: res.row,
                        store: "notes"
                    },
                    go_on);
                }],

                getRow: ["addRow", "row", function(go_on, res) {
                    Db.getRow({key: res.row.id, store: "notes"}, go_on);
                }],

                confirmRow: ["getRow", function(go_on, res) {
                    if (!res.getRow) { return go_on([0, "Expected row"]); }

                    go_on();
                }],

                wipeDb: ["confirmRow", function(go_on, res) {
                    Db.clear({}, go_on);
                }]
            },
            cbk);
        },

        init: function(cbk) {
            Db.init({}, cbk);
        },

        query: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row: async.constant(DbUnitTests._testRow),

                row2: async.constant({
                    id: "test_row2",
                    last_modified: new Date().toISOString(),
                    text: "test_text"
                }),

                addRow: ["initDb", "row", function(go_on, res) {
                    Db.write({
                        key: res.row.id,
                        row: res.row,
                        store: "notes"
                    },
                    go_on);
                }],

                getNotesByIndex: ["addRow", function(go_on, res) {
                    Db.query({index: "last_modified", store: "notes"}, go_on);
                }],

                receivedByIndex: ["getNotesByIndex", function(go_on, res) {
                    if (!res.getNotesByIndex.length) {
                        return go_on([0, "Expected row from query"]);
                    }

                    go_on();
                }],

                getNotesByRange: ["addRow", function(go_on, res) {
                    var lm = res.row.last_modified;

                    var range = [
                        lm,
                        new Date(Date.parse(lm) + 100).toISOString()
                    ];

                    Db.query({
                        index: "last_modified",
                        range: range,
                        store: "notes"
                    },
                    go_on);
                }],

                receivedByRange: ["getNotesByRange", function(go_on, res) {
                    if (res.getNotesByRange.length !== 1) {
                        return go_on([0, "Expected note in range", res]);
                    }

                    go_on();
                }],

                addAnotherRow: [
                    "receivedByIndex",
                    "receivedByRange",
                    "row2",
                    function(go_on, res)
                {
                    var row = res.row2;

                    Db.write({key: row.id, row: row, store: "notes"}, go_on);
                }],

                getNotesWithLimit: ["addAnotherRow", function(go_on, res) {
                    Db.query({
                        filter: function(n) { return !!n.text; },
                        index: "last_modified",
                        limit: 1,
                        store: "notes"
                    },
                    go_on);
                }],

                receivedWithLimit: ["getNotesWithLimit", function(go_on, res) {
                    if (res.getNotesWithLimit.length !== 1) {
                        return go_on([0, "Expected limited number of notes"]);
                    }

                    if (res.getNotesWithLimit[0].id !== res.row2.id) {
                        return go_on([0, "Expected most recent note", res]);
                    }

                    go_on();
                }],

                clean: ["receivedWithLimit", function(go_on, res) {
                    Db.clear({}, go_on);
                }]
            },
            cbk);
        },

        write: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row: async.constant(DbUnitTests._testRow),

                addRow: ["initDb", "row", function(go_on, res) {
                    var row = res.row;

                    Db.write({key: row.id, row: row, store: "notes"}, go_on);
                }],

                getRow: ["addRow", function(go_on, res) {
                    Db.getRow({key: res.row.id, store: "notes"}, go_on);
                }],

                confirmRow: ["getRow", function(go_on, res) {
                    if (res.getRow.id !== res.row.id) {
                        return go_on([0, "Expected row written"]);
                    }

                    go_on();
                }],

                clean: ["confirmRow", function(go_on, res) {
                    Db.clear({}, go_on);
                }]
            },
            cbk);
        },

        removeRow: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row: async.constant(DbUnitTests._testRow),

                addRow: ["initDb", "row", function(go_on, res) {
                    Db.write({
                        key: res.row.id,
                        row: res.row,
                        store: "notes"
                    },
                    go_on);
                }],

                wipeRow: ["addRow", "row", function(go_on, res) {
                    Db.removeRow({key: res.row.id, store: "notes"}, go_on);
                }],

                getRow: ["row", "wipeRow", function(go_on, res) {
                    Db.getRow({key: res.row.id, store: "notes"}, go_on);
                }],

                confirmWiped: ["getRow", function(go_on, res) {
                    if (!!res.getRow) { return go_on([0, "Expected wipe"]); }

                    go_on();
                }]
            },
            cbk);
        },

        update: function(cbk) {
            async.auto({
                initDb: function(go_on) {
                    Db.init({}, go_on);
                },

                row0: async.constant(DbUnitTests._testRow),

                row1: async.constant({
                    id: "test_row2",
                    last_modified: new Date().toISOString(),
                    text: "test_text"
                }),

                updateRows: ["initDb", "row0", "row1", function(go_on, res) {
                    Db.update({
                        rows: [res.row0, res.row1],
                        store: "notes"
                    },
                    go_on);
                }],

                getRows: ["updateRows", function(go_on, res) {
                    if (res.updateRows.length !== 2) {
                        return go_on([0, "Expected updated 2 rows"]);
                    }

                    Db.query({index: "last_modified", store: "notes"}, go_on);
                }],

                confirmRows: ["getRows", function(go_on, res) {
                    if (res.getRows.length !== 2) {
                        return go_on([0, "Expected 2 rows"]);
                    }

                    go_on();
                }],

                clean: ["confirmRows", function(go_on, res) {
                    Db.clear({}, go_on);
                }]
            },
            cbk);
        }
    };
})();

